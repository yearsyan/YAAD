plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.chaquopy)
}

android {
    namespace 'io.github.yearsyan.yaad'
    compileSdk 35

    defaultConfig {
        applicationId "io.github.yearsyan.yaad"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        python {
            version "3.13"
        }
        ndk {
            abiFilters  "arm64-v8a", "x86_64"
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.material3
    implementation libs.dialogx
    implementation libs.okhttp
    implementation libs.mmkv

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}

tasks.register("installGitHooks", Copy) {
    from("config/git-hooks")
    into(".git/hooks")
    includeEmptyDirs = false
}

tasks.register("makeHooksExecutable") {
    doLast {
        if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            file(".git/hooks").listFiles()?.each { hook ->
                if (hook.name in ["pre-commit", "commit-msg", "pre-push"]) {
                    hook.setExecutable(true)
                }
            }
        }
    }
}

tasks.named("installGitHooks").configure {
    finalizedBy("makeHooksExecutable")
}

tasks.named("preBuild").configure {
    dependsOn("installGitHooks")
}



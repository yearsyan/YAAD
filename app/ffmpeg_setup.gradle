def archMap = [
        'arm64-v8a': 'aarch64',
        'x86_64'   : 'x86_64'
]

def targetAbis = ['arm64-v8a', 'x86_64']

targetAbis.each { abi ->

    def arch = archMap[abi]
    def downloadUrl = "https://github.com/yearsyan/ffmpeg-android-build/releases/download/v7.1-beta.7/ffmpeg_android_${arch}_mini.tar.gz"
    def outputTar = layout.buildDirectory.file("ffmpeg/${abi}/ffmpeg.tar.gz").get().asFile
    def extractDir = layout.buildDirectory.dir("ffmpeg/${abi}/extracted").get().asFile

    def downloadTask = tasks.register("downloadFFmpeg_${abi}") {
        outputs.file(outputTar)
        doLast {
            if (!outputTar.exists()) {
                println "Downloading FFmpeg for ${abi}..."
                new URL(downloadUrl).withInputStream { input ->
                    outputTar.parentFile.mkdirs()
                    outputTar.withOutputStream { out -> out << input }
                }
            }
        }
    }

    def extractTask = tasks.register("extractFFmpeg_${abi}", Exec) {
        dependsOn downloadTask
        outputs.dir(extractDir)
        workingDir extractDir
        commandLine 'tar', '-xzf', outputTar.absolutePath
        doFirst {
            println "Extracting FFmpeg for ${abi}..."
            extractDir.mkdirs()
        }
    }

    def copyTask = tasks.register("installFFmpeg_${abi}") {
        dependsOn extractTask
        doLast {
            def libSrc = new File(extractDir, "ffmpeg_android_${arch}_mini/lib/libffmpeg.so")
            def libDst = file("src/main/jniLibs/${abi}/libffmpeg.so")

            def includeSrc = new File(extractDir, "ffmpeg_android_${arch}_mini/include")
            def includeDst = file("src/main/cpp/include/ext/${abi}")

            println "Installing libffmpeg.so to jniLibs/${abi}..."
            libDst.parentFile.mkdirs()
            libDst.bytes = libSrc.bytes

            println "Copying headers to cpp/include..."
            includeDst.deleteDir()
            project.copy {
                from includeSrc
                into includeDst
            }
        }
    }

    tasks.named("preBuild").configure {
        dependsOn copyTask
    }
}
